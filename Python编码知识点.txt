1. Python编码知识点
	
	(1).ord() 字符转UNICODE
	chr() UNICODE转字符

	Python对bytes类型的数据用带b前缀的单引号或双引号表示：
	要把bytes变为str，就需要用decode()方法：
	>>> b'ABC'.decode('ascii')
	'ABC'
	如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：

	>>> b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
	'中'
	
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-
	第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；

	第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
	
	(2).#如何输出格式化的字符串
	print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,
	>>> 'Hello, %s' % 'world'
	'Hello, world'
	>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
	'Hi, Michael, you have $1000000.'
	%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
	%d	整数
	%f	浮点数
	%s	字符串
	%x	十六进制整数
	
	(3).list数据元素从0开始排序，要获取最后一个元素可以使用-1获取，-2获取倒数第二个， 以此类推
	list是一个可变的有序表，在最后插入数据可使用，classmates.append('Adam')，也可把元素插入到指定位置
	classmates.insert(1, 'Jack')，要删除list末尾的元素， 用pop()方法： 要删除指定位置的元素， 用pop(i)方法， 其中i是索引位置 
	list里面的元素的数据类型也可以不同，比如：
		>>> L = ['Apple', 123, True]
		
	另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：
	>>> classmates = ('Michael', 'Bob', 'Tracy')  #注意tuple是圆括号()，list是中括号[]
	现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。
	(4).
	if <条件判断1>:				#注意else if 在python中是elif缩写的，冒号：结尾缩进的语句表示在if里的执行语句
		<执行1>
	elif <条件判断2>:
		<执行2>
	elif <条件判断3>:
		<执行3>
	else:
		<执行4>
	s = input('birth: ')
	birth = int(s)   #默认input输入的数据为str类型，需要手动转换
	if birth < 2000:
		print('00前')
	else:
		print('00后')
		
	(5).For 循环：for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。
	names = ['Michael', 'Bob', 'Tracy']
	for name in names:
		print(name)
	Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从0开始小于5的整数：
	>>> list(range(5))
	[0, 1, 2, 3, 4]
	
	(6).dict表，使用键-值对应的表，具有极快的速度，但是占用大量内存，用空间换时间，使用大括号包裹{}
	>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	>>> d['Michael']
	95
	要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
	>>> 'Thomas' in d
	False
	二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
	要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
	>>> d.pop('Bob')
	75
	>>> d
	{'Michael': 95, 'Tracy': 85}
	
	(7). set表
	set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
	要创建一个set，需要提供一个list作为输入集合：
	>>> s = set([1, 2, 3])
	>>> s
	{1, 2, 3}
	set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
	
	(8).函数
	在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，
	函数的返回值用return语句返回。
	我们以自定义一个求绝对值的my_abs函数为例：
	# -*- coding: utf-8 -*-
	def my_abs(x):
		if x >= 0:
			return x
		else:
			return -x
	print(my_abs(-99))    输出为 99
	如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：
	>>> from abstest import my_abs                          
	>>> my_abs(-9)                                          
	9                                                                                                    
	如果想定义一个什么事也不做的空函数，可以用pass语句：
	def nop():
		pass
	pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，
	就可以先放一个pass，让代码能运行起来。  
	
	def add_end(L=[]):
		L.append('END')
		return L	
	Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，
	默认参数的内容就变了，不再是函数定义时的[]了。

	定义默认参数要牢记一点：默认参数必须指向不变对象！
	我们可以用None这个不变对象来实现：
	def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
	定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，
	可以传入任意个参数，包括0个参数：
	>>> nums = [1, 2, 3]
	>>> calc(*nums)
	14
	*nums表示把nums这个list的所有元素作为可变参数传进去。
	可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，
	这些关键字参数在函数内部自动组装为一个dict。请看示例：
	def person(name, age, **kw):
		print('name:', name, 'age:', age, 'other:', kw)
	函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：
	
	(9).函数参数问题：可变参数，关键字参数
	要注意定义可变参数和关键字参数的语法：
	*args是可变参数，args接收的是一个tuple；
	**kw是关键字参数，kw接收的是一个dict。
	以及调用函数时如何传入可变参数和关键字参数的语法：
	可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
	关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。
	使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
	命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
	定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。
		
	(10) 递归函数
	上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：

	def fact(n):
		return fact_iter(n, 1)

	def fact_iter(num, product):
		if num == 1:
			return product
		return fact_iter(num - 1, num * product)
	可以看到，return fact_iter(num - 1, num * product)仅返回递归函数本身，num - 1和num * product在函数调用前就会被计算，不影响函数调用。不会堆栈溢出

	fact(5)对应的fact_iter(5, 1)的调用如下：

	===> fact_iter(5, 1)
	===> fact_iter(4, 5)
	===> fact_iter(3, 20)
	===> fact_iter(2, 60)
	===> fact_iter(1, 120)
	===> 120
	使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。

	针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。

	Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。
	
	(11)切片取数
	>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
	对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。

	对应上面的问题，取前3个元素，用一行代码就可以完成切片：

	>>> L[0:3]
	['Michael', 'Sarah', 'Tracy']
	L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
	类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：

	>>> L[-2:]
	['Bob', 'Jack']
	>>> L[-2:-1]
	['Bob']
	记住倒数第一个元素的索引是-1。
	
	>>> L = list(range(100))
	>>> L
	[0, 1, 2, 3, ..., 99]
	前10个数，每两个取一个：
	>>> L[:10:2]
	[0, 2, 4, 6, 8]
	所有数，每5个取一个：

	>>> L[::5]
	[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
	
	(12)迭代输出
	默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，
	可以用for k, v in d.items()。
	
	那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：

	>>> from collections import Iterable
	>>> isinstance('abc', Iterable) # str是否可迭代
	True
	>>> isinstance([1,2,3], Iterable) # list是否可迭代
	True
	>>> isinstance(123, Iterable) # 整数是否可迭代
	False
	
	最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：

	>>> for i, value in enumerate(['A', 'B', 'C']):
	...     print(i, value)
	...
	0 A
	1 B
	2 C
	
	(13)列表生成式，生成list表
	>>> [x * x for x in range(1, 11)]
	[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
	写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。

	for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：

	>>> [x * x for x in range(1, 11) if x % 2 == 0]
	[4, 16, 36, 64, 100]
	还可以使用两层循环，可以生成全排列：

	>>> [m + n for m in 'ABC' for n in 'XYZ']
	['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
	
	凡是可作用于for循环的对象都是Iterable类型；

	凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；

	集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。
	
	(14)全局变量和局部变量
	Money = 2000
	def AddMoney():
	   # 想改正代码就取消以下注释:
	   # global Money  这样输出就会变为2000，2001
	   Money = Money + 1
	 
	print Money
	AddMoney()
	print Money
	
	输出：
	2000
	2000
	
	(15)输入函数
	input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。

	#!/usr/bin/python
	# -*- coding: UTF-8 -*- 
	 
	str = input("请输入：")
	print "你输入的内容是: ", str
	这会产生如下的对应着输入的结果：

	请输入：[x*5 for x in range(2,10,2)]
	你输入的内容是:  [10, 20, 30, 40]